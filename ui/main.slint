import { Button, ComboBox, TextEdit, Spinner, VerticalBox } from "std-widgets.slint"; 
export enum SelectedWindow { select, freestyle, story, customlvl }

export component Block inherits Rectangle{
    in property <length> block_width;
    in property <color> block_color;
    in property <string> block_name;
    
    width: block_width;
    height: 30px;
    border-radius: 5px;
    background: block_color;
    
    Text {
        x:5px;
        text: block_name;
        color: black;
        font-family: "Comic Sans MS";
        font-weight: 550;
        font-size: 16px;
    }
    TouchArea {
        moved => {
            if (self.pressed){
                parent.x += self.mouse-x - self.width/2;
                parent.y += self.mouse-y - self.height/2;
                
            }
        }
    }
}



component SelectionScreen {
    callback freestyleClick <=> fm.clicked;
    callback storyClick <=> sm.clicked;
    callback customClick <=> cl.clicked;
    min-width: 350px;
    Rectangle {
        VerticalLayout {
            width: 100%;
            height: 100%;
            alignment: end;
            Text {
                text: "Welcome to Prism Private Intelligence!";
                horizontal-alignment: center;
            }
            Text {
                text: "The Premier Learn-To-Code App utilizing Mediated Transfer!";
                horizontal-alignment: center;
                min-height: 50px;
                wrap: word-wrap;
            }
            HorizontalLayout {
                padding-top: 50px;
                padding-left: 10px;
                padding-right: 10px;
                height: 30%;
                spacing: 5px;
                
                fm := Button {
                    text: "Freestyle Mode";
                }
                sm := Button {
                    text: "Story Mode";
                }
                cl := Button {
                    text: "Custom Levels";
                }
            }
        }
    }
}

component FreestyleScreen{
    in property <string> result: "Nothing yet";
    changed result => {
        spin.progress = 0%;
        spin.visible = false;
        spintime.running = false;
        result_text.text = result;
    }
    callback run_code(string);
    callback back_button <=> back.clicked;
    spintime := Timer {
        interval: 50ms;
        running: false;
        triggered => {
            spin.progress += spin.progress >= 100% ? -100% : 2%;
        }
    }

    back := Button {
        width: 50px;
        height: 50px;
        primary: false;
        text: "<-";
        x: 5px;
        y: 5px;
    }

    minimizeBlocks := Button {
        y:5px + back.height +5px;
        x:5px;
        width: 50px;
        height: 50px;
        text: "[=]";
        clicked => {
            if (blockArea.width == 150px){
                blockArea.width = 0px;
            }
            else{
                blockArea.width = 150px;
            }
        }
    }

    codeArea:= VerticalLayout {
        x: 5px + back.width + 5px;
        y: 5px;
        width: parent.width - self.x - 5px - blockArea.width - 5px;
        height: parent.height - self.y - startbutton.height ;
        spacing: 5px;

        editor := TextEdit {
            min-width: 300px;
            min-height: 300px;
            font-size: 14px;
            has-focus: true;

            text: "Write code here";
        }
        startbutton := Button {
            height: 30px;
            text: "Start";
            clicked => {
                spintime.running = true;
                spin.visible = true;
                run_code(editor.text);
            }
        }
        result_text := Text {
            text: "Nothing yet";
        }
        spin := Spinner {
            visible: false;
            progress: 0%;
        }
    }

    Rectangle {
        x: 5px + back.width + 5px + codeArea.width + 5px;
        y: 5px;
        width: 160px;

        blockArea := Rectangle{
            width: 150px;
            y:0px;
            x:0px;
            height: editor.height;
            background: gray;
            border-width: 5px;
            
            
            Block {
                block_width: 100px;
                block_color: orange;
                block_name: "Test block";
            }
                

        }
        Image {
            y: blockArea.height+5px;
            height: parent.height - blockArea.height - 5px;
            source: @image-url("images/Prism-P.I._logo_temp.png");
        }
    }

}

component CustomLevelScreen {
    Rectangle {
        Text { text: "Pretty custom yo"; }
    }
}





component Component {
    Rectangle {
        Block {
            block_width: 100px;
            block_color: orange;
            block_name: "Test block";
        }
    }
}


export component MainWindow inherits Window {
    title: "Prism-P.I.";
    min-height: 300px;
    min-width: 300px;
    property <SelectedWindow> windowToSelect: SelectedWindow.freestyle;
    in property <string> freestyle_string <=> fs.result;
    callback run_freestyle_code <=> fs.run_code;
    ss := SelectionScreen {
        visible: windowToSelect == SelectedWindow.select ? true : false;
        freestyleClick => {
            windowToSelect = SelectedWindow.freestyle;
        }
        storyClick => {
            windowToSelect = SelectedWindow.story;
        }
        customClick => {
            windowToSelect = SelectedWindow.customlvl;
        }
    }
    fs := FreestyleScreen {
        width: 100%;
        height: 100%;
        visible: windowToSelect == SelectedWindow.freestyle ? true : false;
        back_button => {
            windowToSelect = SelectedWindow.select;
        }
    }
    cs := CustomLevelScreen {
        visible: windowToSelect == SelectedWindow.customlvl ? true : false;
    }


}

